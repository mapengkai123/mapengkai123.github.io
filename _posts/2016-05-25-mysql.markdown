---
layout: post
title:  "mysql主从的搭建以及优化 "
date:   2016-05-25 15:25:30 +0800
---
<img src="/images/fulls/11.jpg" class="fit image">


mysql读写分离指读与写分别使用不同的数据库，一个写入的数据库，一个或多个读的数据库，各个数据库分别位于不同的服务器上;

好处

	1.增加了机器的处理能力
	2.对于以读为主的应用，使用读写分离是最好的场景，因为可以确保写的服务器压力更小，而读操作又可以接受点时间上的延迟、
	3.高可用
	4.负载均衡

为了确保数据库产品的稳定性，很多数据库拥有双机热备功能。也就是，第一台数据库服务器，是对外提供增删改业务的生产服务器；第二台数据库服务器，主要进行读的操作。MySQL Proxy最强大的一项功能是实现“读写分离(Read/Write Splitting)”。基本的原理是让主数据库处理事务性查询，而从数据库处理SELECT查询。数据库复制被用来把事务性查询导致的变更同步到集群中的从数据库。 当然，主服务器也可以提供查询服务。使用读写分离最大的作用无非是环境服务器压力。
  MySQL Proxy是一个处于你的client端和MySQL server端之间的简单程序，它可以监测、分析或改变它们的通信。它使用灵活，没有限制，常见的用途包括：负载平衡，故障、查询分析，查询过滤和修改等等。
 MySQL Proxy就是这么一个中间层代理，简单的说，MySQL Proxy就是一个连接池，负责将前台应用的连接请求转发给后台的数据库，并且通过使用lua脚本，可以实现复杂的连接控制和过滤，从而实现读写分离和负载平衡。对于应用来说，MySQL Proxy是完全透明的，应用则只需要连接到MySQL Proxy的监听端口即可。当然，这样proxy机器可能成为单点失效，但完全可以使用多个proxy机器做为冗余，在   应用服务器的连接池配置中配置到多个proxy的连接参数即可。
 MySQL Proxy更强大的一项功能是实现“读写分离”，基本原理是让主数据库处理事务性查询，让从库处理SELECT查询。数据库复制被用来把事务性查询导致的变更同步到集群中的从库。
 
那么如何解决主从延迟？

	1. 最简单的减少slave同步延时的方案就是在架构上做优化，尽量让主库的DDL快速执行。
	2. 还有就是主库写对数据安全性较高，比如sync_binlog=1，innodb_flush_log_at_trx_commit = 1 之类的设置，而slave则不需要这么高的数据安全，完全可以将sync_binlog设置为0或者关闭binlog，innodb_flushlog也可以设置为0来提高sql的执行效率。
	3.使用比主库更好的硬件设备作为slave。
	4. mysql-5.6.3已经支持了多线程的主从复制。


主服务器将更新写入二进制日志文件，并维护文件的一个索引以跟踪日志循环。这些日志可以记录发送到从服务器的更新。当一个从服务器连接主服务器时，它通知主服务器从服 务器在日志中读取的最后一次成功更新的位置。从服务器接收从那时起发生的任何更新，然后封锁并等待主服务器通知新的更新。
优点：

	1、数据存在多个镜像和数据冗余，可以防止单一主机的数据丢失，提高数据的安全性。
	2、主机宕机的时候，可以切换到从服务器上，数据的一致性可能存在问题（异步复制的延迟）。如果主机突然宕机，可能一些数据没有及时同步从服务器上。MySQL5.6提供一种半同步的复制方式（参考：Semisynchronous Replication），但是效率使其略显鸡肋；还有其他方式实现的同步复制，如DRBD。
	3、如果使用mysql proxy，在业务上可以实现读写分离。即可以把一些读操作在从服务器上执行，减小主服务器的负担。
	4、在从服务器上做数据备份，这样不影响主服务器的正常运行。如mysqldump备份时会加表所。
	5、在从服务器上做数据报表和数据统计，这样可以避免生产服务器的访问压力过大。
	6、从服务器可以使用不用的存储引擎，适应不同的应用需求；另外从库上的数据表建立不同的索引，可以满足如统计工作上的要求。myisam 读操作快 innodb 写修改操作抗并发好

Mysql 优化

 更换性能更好的硬件，加大内存 
 增加MySQL查询缓存与key缓存
 使用第三方如memcache等NoSQL技术
 数据库进行分区处理，减小表大小
 其他：避免SQL语句中使用NULL判断避免Where中使用Mysql函数操作避免使用like ‘%%’形式数据比较两边类型要一致，如 name=1,如果name为字符类型将进行全表搜索在常用的列上增加索引对文本字段使用“前缀索引”,减少索引文件大小经常使用 explain 分析sql执行效率使用Mysql慢查询机制监控查询状态


索引优化原则

	1.数据类型越小越好，越简单越好，避免空值
	2.索引顺序：最左原则
	例如：index(a,b) 当 where 中有 a 或 a、b 时索引会被使用，只有 b 时不会被使用。（不同的数据库或不同的版本可能会有不同）
	3.聚集索引、B+树、主键
	一个表只能有一个聚集索引，聚集索引以B+树形式存储，所以，聚集索引的规则决定了索引存放的物理顺序（聚集索引对需要最快速缩小查询访问及最快速进行字段排序时，非常有用），需要特别注意

查询优化

	1.尽量避免表扫描，首先应考虑在  where 及 order by 涉及的列上建立索引
	2.尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进	行全表扫描
	select id from t where num is null
	可以在num上设置默认值0，确保表中num列没有null值，然后这样查询
	select id from t where num=0  
	3、尽量避免在 where 子句中使用 != 或 <> 或 or 操作符，否则将放弃引擎而进行全表扫描